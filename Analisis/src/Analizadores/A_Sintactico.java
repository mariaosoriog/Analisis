
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package Analizadores;

import Clases.GestionLenguaje;
import java_cup.runtime.Symbol;
import java.util.LinkedList;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class A_Sintactico extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return Simbolos.class;
}

  /** Default constructor. */
  @Deprecated
  public A_Sintactico() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public A_Sintactico(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public A_Sintactico(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\161\000\002\002\004\000\002\002\003\000\002\003" +
    "\010\000\002\005\003\000\002\005\002\000\002\006\004" +
    "\000\002\006\004\000\002\006\004\000\002\006\003\000" +
    "\002\007\003\000\002\007\003\000\002\007\003\000\002" +
    "\010\003\000\002\010\003\000\002\010\003\000\002\010" +
    "\003\000\002\070\010\000\002\071\004\000\002\071\002" +
    "\000\002\072\005\000\002\072\002\000\002\022\003\000" +
    "\002\011\006\000\002\035\006\000\002\035\002\000\002" +
    "\012\003\000\002\013\003\000\002\014\003\000\002\014" +
    "\003\000\002\014\003\000\002\014\003\000\002\014\003" +
    "\000\002\015\003\000\002\016\003\000\002\017\003\000" +
    "\002\020\003\000\002\021\003\000\002\004\005\000\002" +
    "\004\003\000\002\004\003\000\002\032\003\000\002\032" +
    "\003\000\002\033\003\000\002\033\003\000\002\033\003" +
    "\000\002\033\003\000\002\034\003\000\002\034\003\000" +
    "\002\034\003\000\002\034\003\000\002\034\003\000\002" +
    "\034\003\000\002\031\003\000\002\031\003\000\002\023" +
    "\007\000\002\024\004\000\002\024\004\000\002\024\004" +
    "\000\002\024\004\000\002\024\004\000\002\025\005\000" +
    "\002\025\002\000\002\026\005\000\002\026\002\000\002" +
    "\027\004\000\002\030\005\000\002\030\002\000\002\036" +
    "\003\000\002\036\003\000\002\037\012\000\002\041\004" +
    "\000\002\045\005\000\002\045\005\000\002\046\005\000" +
    "\002\046\002\000\002\047\003\000\002\047\003\000\002" +
    "\047\003\000\002\042\004\000\002\042\002\000\002\040" +
    "\007\000\002\043\007\000\002\043\006\000\002\043\003" +
    "\000\002\044\006\000\002\050\003\000\002\050\003\000" +
    "\002\050\003\000\002\051\011\000\002\054\006\000\002" +
    "\054\005\000\002\055\006\000\002\055\002\000\002\052" +
    "\011\000\002\053\010\000\002\056\003\000\002\056\002" +
    "\000\002\057\004\000\002\057\004\000\002\057\003\000" +
    "\002\062\003\000\002\062\003\000\002\060\014\000\002" +
    "\063\004\000\002\063\002\000\002\064\005\000\002\066" +
    "\003\000\002\066\003\000\002\066\003\000\002\065\005" +
    "\000\002\065\002\000\002\067\004\000\002\061\012" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\320\000\004\010\004\001\002\000\004\011\010\001" +
    "\002\000\004\002\007\001\002\000\004\002\000\001\002" +
    "\000\004\002\001\001\002\000\004\012\011\001\002\000" +
    "\026\013\ufffd\015\033\024\014\036\032\044\042\055\012" +
    "\063\034\065\041\075\023\103\037\001\002\000\004\037" +
    "\303\001\002\000\022\013\ufff9\042\ufff9\043\ufff9\054\ufff9" +
    "\057\ufff9\064\ufff9\066\ufff9\070\ufff9\001\002\000\014\025" +
    "\150\026\152\027\162\030\163\031\155\001\002\000\044" +
    "\013\uffab\015\uffab\024\uffab\036\uffab\042\uffab\043\uffab\044" +
    "\uffab\054\uffab\055\uffab\057\uffab\063\uffab\064\uffab\065\uffab" +
    "\066\uffab\070\uffab\075\uffab\103\uffab\001\002\000\044\013" +
    "\ufff2\015\ufff2\024\ufff2\036\ufff2\042\ufff2\043\ufff2\044\ufff2" +
    "\054\ufff2\055\ufff2\057\ufff2\063\ufff2\064\ufff2\065\ufff2\066" +
    "\ufff2\070\ufff2\075\ufff2\103\ufff2\001\002\000\044\013\uffbd" +
    "\015\uffbd\024\uffbd\036\uffbd\042\uffbd\043\uffbd\044\uffbd\054" +
    "\uffbd\055\uffbd\057\uffbd\063\uffbd\064\uffbd\065\uffbd\066\uffbd" +
    "\070\uffbd\075\uffbd\103\uffbd\001\002\000\044\013\ufff5\015" +
    "\ufff5\024\ufff5\036\ufff5\042\ufff5\043\ufff5\044\ufff5\054\ufff5" +
    "\055\ufff5\057\ufff5\063\ufff5\064\ufff5\065\ufff5\066\ufff5\070" +
    "\ufff5\075\ufff5\103\ufff5\001\002\000\044\013\uffbe\015\uffbe" +
    "\024\uffbe\036\uffbe\042\uffbe\043\uffbe\044\uffbe\054\uffbe\055" +
    "\uffbe\057\uffbe\063\uffbe\064\uffbe\065\uffbe\066\uffbe\070\uffbe" +
    "\075\uffbe\103\uffbe\001\002\000\006\014\uffe9\033\253\001" +
    "\002\000\004\015\033\001\002\000\004\013\147\001\002" +
    "\000\044\013\ufff7\015\033\024\014\036\032\042\ufff7\043" +
    "\ufff7\044\042\054\ufff7\055\012\057\ufff7\063\034\064\ufff7" +
    "\065\041\066\ufff7\070\ufff7\075\023\103\037\001\002\000" +
    "\044\013\ufff8\015\033\024\014\036\032\042\ufff8\043\ufff8" +
    "\044\042\054\ufff8\055\012\057\ufff8\063\034\064\ufff8\065" +
    "\041\066\ufff8\070\ufff8\075\023\103\037\001\002\000\044" +
    "\013\ufff4\015\ufff4\024\ufff4\036\ufff4\042\ufff4\043\ufff4\044" +
    "\ufff4\054\ufff4\055\ufff4\057\ufff4\063\ufff4\064\ufff4\065\ufff4" +
    "\066\ufff4\070\ufff4\075\ufff4\103\ufff4\001\002\000\044\013" +
    "\ufff3\015\ufff3\024\ufff3\036\ufff3\042\ufff3\043\ufff3\044\ufff3" +
    "\054\ufff3\055\ufff3\057\ufff3\063\ufff3\064\ufff3\065\ufff3\066" +
    "\ufff3\070\ufff3\075\ufff3\103\ufff3\001\002\000\044\013\ufff6" +
    "\015\033\024\014\036\032\042\ufff6\043\ufff6\044\042\054" +
    "\ufff6\055\012\057\ufff6\063\034\064\ufff6\065\041\066\ufff6" +
    "\070\ufff6\075\023\103\037\001\002\000\004\037\133\001" +
    "\002\000\124\004\uffe8\005\uffe8\006\uffe8\007\uffe8\013\uffe8" +
    "\014\uffe8\015\uffe8\016\uffe8\017\uffe8\020\uffe8\021\uffe8\022" +
    "\uffe8\023\uffe8\024\uffe8\032\uffe8\033\uffe8\034\uffe8\035\uffe8" +
    "\036\uffe8\037\uffe8\040\uffe8\042\uffe8\043\uffe8\044\uffe8\045" +
    "\uffe8\051\uffe8\052\uffe8\053\uffe8\054\uffe8\055\uffe8\057\uffe8" +
    "\060\uffe8\061\uffe8\062\uffe8\063\uffe8\064\uffe8\065\uffe8\066" +
    "\uffe8\070\uffe8\075\uffe8\103\uffe8\001\002\000\004\037\125" +
    "\001\002\000\044\013\uffac\015\uffac\024\uffac\036\uffac\042" +
    "\uffac\043\uffac\044\uffac\054\uffac\055\uffac\057\uffac\063\uffac" +
    "\064\uffac\065\uffac\066\uffac\070\uffac\075\uffac\103\uffac\001" +
    "\002\000\022\013\ufffe\042\ufffe\043\ufffe\054\ufffe\057\ufffe" +
    "\064\ufffe\066\ufffe\070\ufffe\001\002\000\044\013\uffec\015" +
    "\uffec\024\uffec\036\uffec\042\uffec\043\uffec\044\uffec\054\uffec" +
    "\055\uffec\057\uffec\063\uffec\064\uffec\065\uffec\066\uffec\070" +
    "\uffec\075\uffec\103\uffec\001\002\000\044\013\uffaa\015\uffaa" +
    "\024\uffaa\036\uffaa\042\uffaa\043\uffaa\044\uffaa\054\uffaa\055" +
    "\uffaa\057\uffaa\063\uffaa\064\uffaa\065\uffaa\066\uffaa\070\uffaa" +
    "\075\uffaa\103\uffaa\001\002\000\026\015\033\024\014\036" +
    "\032\044\042\055\012\063\034\065\041\066\ufffd\075\023" +
    "\103\037\001\002\000\004\015\033\001\002\000\004\045" +
    "\044\001\002\000\016\050\061\076\054\077\057\100\045" +
    "\101\060\102\046\001\002\000\114\004\uffdf\005\uffdf\006" +
    "\uffdf\007\uffdf\013\uffdf\015\uffdf\016\uffdf\017\uffdf\020\uffdf" +
    "\021\uffdf\022\uffdf\023\uffdf\024\uffdf\034\uffdf\035\uffdf\036" +
    "\uffdf\040\uffdf\042\uffdf\043\uffdf\044\uffdf\047\uffdf\051\uffdf" +
    "\052\uffdf\053\uffdf\054\uffdf\055\uffdf\057\uffdf\060\uffdf\061" +
    "\uffdf\062\uffdf\063\uffdf\064\uffdf\065\uffdf\066\uffdf\070\uffdf" +
    "\075\uffdf\103\uffdf\001\002\000\114\004\uffdd\005\uffdd\006" +
    "\uffdd\007\uffdd\013\uffdd\015\uffdd\016\uffdd\017\uffdd\020\uffdd" +
    "\021\uffdd\022\uffdd\023\uffdd\024\uffdd\034\uffdd\035\uffdd\036" +
    "\uffdd\040\uffdd\042\uffdd\043\uffdd\044\uffdd\047\uffdd\051\uffdd" +
    "\052\uffdd\053\uffdd\054\uffdd\055\uffdd\057\uffdd\060\uffdd\061" +
    "\uffdd\062\uffdd\063\uffdd\064\uffdd\065\uffdd\066\uffdd\070\uffdd" +
    "\075\uffdd\103\uffdd\001\002\000\114\004\uffe4\005\uffe4\006" +
    "\uffe4\007\uffe4\013\uffe4\015\uffe4\016\uffe4\017\uffe4\020\uffe4" +
    "\021\uffe4\022\uffe4\023\uffe4\024\uffe4\034\uffe4\035\uffe4\036" +
    "\uffe4\040\uffe4\042\uffe4\043\uffe4\044\uffe4\047\uffe4\051\uffe4" +
    "\052\uffe4\053\uffe4\054\uffe4\055\uffe4\057\uffe4\060\uffe4\061" +
    "\uffe4\062\uffe4\063\uffe4\064\uffe4\065\uffe4\066\uffe4\070\uffe4" +
    "\075\uffe4\103\uffe4\001\002\000\114\004\uffe6\005\uffe6\006" +
    "\uffe6\007\uffe6\013\uffe6\015\uffe6\016\uffe6\017\uffe6\020\uffe6" +
    "\021\uffe6\022\uffe6\023\uffe6\024\uffe6\034\uffe6\035\uffe6\036" +
    "\uffe6\040\uffe6\042\uffe6\043\uffe6\044\uffe6\047\uffe6\051\uffe6" +
    "\052\uffe6\053\uffe6\054\uffe6\055\uffe6\057\uffe6\060\uffe6\061" +
    "\uffe6\062\uffe6\063\uffe6\064\uffe6\065\uffe6\066\uffe6\070\uffe6" +
    "\075\uffe6\103\uffe6\001\002\000\114\004\uffe2\005\uffe2\006" +
    "\uffe2\007\uffe2\013\uffe2\015\uffe2\016\uffe2\017\uffe2\020\uffe2" +
    "\021\uffe2\022\uffe2\023\uffe2\024\uffe2\034\uffe2\035\uffe2\036" +
    "\uffe2\040\uffe2\042\uffe2\043\uffe2\044\uffe2\047\uffe2\051\uffe2" +
    "\052\uffe2\053\uffe2\054\uffe2\055\uffe2\057\uffe2\060\uffe2\061" +
    "\uffe2\062\uffe2\063\uffe2\064\uffe2\065\uffe2\066\uffe2\070\uffe2" +
    "\075\uffe2\103\uffe2\001\002\000\004\046\uffae\001\002\000" +
    "\114\004\uffe5\005\uffe5\006\uffe5\007\uffe5\013\uffe5\015\uffe5" +
    "\016\uffe5\017\uffe5\020\uffe5\021\uffe5\022\uffe5\023\uffe5\024" +
    "\uffe5\034\uffe5\035\uffe5\036\uffe5\040\uffe5\042\uffe5\043\uffe5" +
    "\044\uffe5\047\uffe5\051\uffe5\052\uffe5\053\uffe5\054\uffe5\055" +
    "\uffe5\057\uffe5\060\uffe5\061\uffe5\062\uffe5\063\uffe5\064\uffe5" +
    "\065\uffe5\066\uffe5\070\uffe5\075\uffe5\103\uffe5\001\002\000" +
    "\114\004\uffe1\005\uffe1\006\uffe1\007\uffe1\013\uffe1\015\uffe1" +
    "\016\uffe1\017\uffe1\020\uffe1\021\uffe1\022\uffe1\023\uffe1\024" +
    "\uffe1\034\uffe1\035\uffe1\036\uffe1\040\uffe1\042\uffe1\043\uffe1" +
    "\044\uffe1\047\uffe1\051\uffe1\052\uffe1\053\uffe1\054\uffe1\055" +
    "\uffe1\057\uffe1\060\uffe1\061\uffe1\062\uffe1\063\uffe1\064\uffe1" +
    "\065\uffe1\066\uffe1\070\uffe1\075\uffe1\103\uffe1\001\002\000" +
    "\004\046\072\001\002\000\004\047\066\001\002\000\114" +
    "\004\uffe0\005\uffe0\006\uffe0\007\uffe0\013\uffe0\015\uffe0\016" +
    "\uffe0\017\uffe0\020\uffe0\021\uffe0\022\uffe0\023\uffe0\024\uffe0" +
    "\034\uffe0\035\uffe0\036\uffe0\040\uffe0\042\uffe0\043\uffe0\044" +
    "\uffe0\047\uffe0\051\uffe0\052\uffe0\053\uffe0\054\uffe0\055\uffe0" +
    "\057\uffe0\060\uffe0\061\uffe0\062\uffe0\063\uffe0\064\uffe0\065" +
    "\uffe0\066\uffe0\070\uffe0\075\uffe0\103\uffe0\001\002\000\114" +
    "\004\uffde\005\uffde\006\uffde\007\uffde\013\uffde\015\uffde\016" +
    "\uffde\017\uffde\020\uffde\021\uffde\022\uffde\023\uffde\024\uffde" +
    "\034\uffde\035\uffde\036\uffde\040\uffde\042\uffde\043\uffde\044" +
    "\uffde\047\uffde\051\uffde\052\uffde\053\uffde\054\uffde\055\uffde" +
    "\057\uffde\060\uffde\061\uffde\062\uffde\063\uffde\064\uffde\065" +
    "\uffde\066\uffde\070\uffde\075\uffde\103\uffde\001\002\000\004" +
    "\047\063\001\002\000\114\004\uffe3\005\uffe3\006\uffe3\007" +
    "\uffe3\013\uffe3\015\uffe3\016\uffe3\017\uffe3\020\uffe3\021\uffe3" +
    "\022\uffe3\023\uffe3\024\uffe3\034\uffe3\035\uffe3\036\uffe3\040" +
    "\uffe3\042\uffe3\043\uffe3\044\uffe3\047\uffe3\051\uffe3\052\uffe3" +
    "\053\uffe3\054\uffe3\055\uffe3\057\uffe3\060\uffe3\061\uffe3\062" +
    "\uffe3\063\uffe3\064\uffe3\065\uffe3\066\uffe3\070\uffe3\075\uffe3" +
    "\103\uffe3\001\002\000\026\015\033\024\014\036\032\044" +
    "\042\054\ufffd\055\012\063\034\065\041\075\023\103\037" +
    "\001\002\000\004\054\065\001\002\000\004\046\uffad\001" +
    "\002\000\026\015\033\024\014\036\032\044\042\054\ufffd" +
    "\055\012\063\034\065\041\075\023\103\037\001\002\000" +
    "\004\054\070\001\002\000\020\046\uffaf\050\061\076\054" +
    "\077\057\100\045\101\060\102\046\001\002\000\004\046" +
    "\uffb0\001\002\000\044\013\uffb1\015\uffb1\024\uffb1\036\uffb1" +
    "\042\uffb1\043\uffb1\044\uffb1\054\uffb1\055\uffb1\057\uffb1\063" +
    "\uffb1\064\uffb1\065\uffb1\066\uffb1\070\uffb1\075\uffb1\103\uffb1" +
    "\001\002\000\004\066\074\001\002\000\004\037\075\001" +
    "\002\000\016\015\033\076\054\077\057\100\045\101\060" +
    "\102\046\001\002\000\012\040\uffb7\051\107\052\114\053" +
    "\116\001\002\000\112\004\uffcc\005\uffcc\006\uffcc\007\uffcc" +
    "\013\uffcc\015\uffcc\016\uffcc\017\uffcc\020\uffcc\021\uffcc\022" +
    "\uffcc\023\uffcc\024\uffcc\034\uffcc\035\uffcc\036\uffcc\040\uffcc" +
    "\042\uffcc\043\uffcc\044\uffcc\051\uffcc\052\uffcc\053\uffcc\054" +
    "\uffcc\055\uffcc\057\uffcc\060\uffcc\061\uffcc\062\uffcc\063\uffcc" +
    "\064\uffcc\065\uffcc\066\uffcc\070\uffcc\075\uffcc\103\uffcc\001" +
    "\002\000\112\004\uffcd\005\uffcd\006\uffcd\007\uffcd\013\uffcd" +
    "\015\uffcd\016\uffcd\017\uffcd\020\uffcd\021\uffcd\022\uffcd\023" +
    "\uffcd\024\uffcd\034\uffcd\035\uffcd\036\uffcd\040\uffcd\042\uffcd" +
    "\043\uffcd\044\uffcd\051\uffcd\052\uffcd\053\uffcd\054\uffcd\055" +
    "\uffcd\057\uffcd\060\uffcd\061\uffcd\062\uffcd\063\uffcd\064\uffcd" +
    "\065\uffcd\066\uffcd\070\uffcd\075\uffcd\103\uffcd\001\002\000" +
    "\024\016\110\017\112\020\111\021\115\022\106\023\113" +
    "\051\107\052\114\053\116\001\002\000\004\040\103\001" +
    "\002\000\044\013\uffa3\015\uffa3\024\uffa3\036\uffa3\042\uffa3" +
    "\043\uffa3\044\uffa3\054\uffa3\055\uffa3\057\uffa3\063\uffa3\064" +
    "\uffa3\065\uffa3\066\uffa3\070\uffa3\075\uffa3\103\uffa3\001\002" +
    "\000\016\015\033\076\054\077\057\100\045\101\060\102" +
    "\046\001\002\000\016\015\033\076\054\077\057\100\045" +
    "\101\060\102\046\001\002\000\020\015\uffcf\075\uffcf\076" +
    "\uffcf\077\uffcf\100\uffcf\101\uffcf\102\uffcf\001\002\000\016" +
    "\015\uffb6\076\uffb6\077\uffb6\100\uffb6\101\uffb6\102\uffb6\001" +
    "\002\000\020\015\uffd3\075\uffd3\076\uffd3\077\uffd3\100\uffd3" +
    "\101\uffd3\102\uffd3\001\002\000\020\015\uffd1\075\uffd1\076" +
    "\uffd1\077\uffd1\100\uffd1\101\uffd1\102\uffd1\001\002\000\020" +
    "\015\uffd2\075\uffd2\076\uffd2\077\uffd2\100\uffd2\101\uffd2\102" +
    "\uffd2\001\002\000\020\015\uffce\075\uffce\076\uffce\077\uffce" +
    "\100\uffce\101\uffce\102\uffce\001\002\000\016\015\uffb5\076" +
    "\uffb5\077\uffb5\100\uffb5\101\uffb5\102\uffb5\001\002\000\020" +
    "\015\uffd0\075\uffd0\076\uffd0\077\uffd0\100\uffd0\101\uffd0\102" +
    "\uffd0\001\002\000\016\015\uffb4\076\uffb4\077\uffb4\100\uffb4" +
    "\101\uffb4\102\uffb4\001\002\000\012\040\uffba\051\uffba\052" +
    "\uffba\053\uffba\001\002\000\012\040\uffb9\051\uffb9\052\uffb9" +
    "\053\uffb9\001\002\000\016\015\033\076\054\077\057\100" +
    "\045\101\060\102\046\001\002\000\004\040\uffbb\001\002" +
    "\000\012\040\uffb7\051\107\052\114\053\116\001\002\000" +
    "\004\040\uffb8\001\002\000\016\015\033\076\054\077\057" +
    "\100\045\101\060\102\046\001\002\000\004\040\127\001" +
    "\002\000\004\056\130\001\002\000\026\015\033\024\014" +
    "\036\032\044\042\055\012\063\034\064\ufffd\065\041\075" +
    "\023\103\037\001\002\000\004\064\132\001\002\000\044" +
    "\013\uffa4\015\uffa4\024\uffa4\036\uffa4\042\uffa4\043\uffa4\044" +
    "\uffa4\054\uffa4\055\uffa4\057\uffa4\063\uffa4\064\uffa4\065\uffa4" +
    "\066\uffa4\070\uffa4\075\uffa4\103\uffa4\001\002\000\016\015" +
    "\033\076\054\077\057\100\045\101\060\102\046\001\002" +
    "\000\004\040\135\001\002\000\004\041\136\001\002\000" +
    "\030\015\033\024\014\036\032\042\ufffd\043\ufffd\044\042" +
    "\055\012\063\034\065\041\075\023\103\037\001\002\000" +
    "\006\042\140\043\uffb2\001\002\000\026\015\033\024\014" +
    "\036\032\043\ufffd\044\042\055\012\063\034\065\041\075" +
    "\023\103\037\001\002\000\004\043\142\001\002\000\044" +
    "\013\uffbc\015\uffbc\024\uffbc\036\uffbc\042\uffbc\043\uffbc\044" +
    "\uffbc\054\uffbc\055\uffbc\057\uffbc\063\uffbc\064\uffbc\065\uffbc" +
    "\066\uffbc\070\uffbc\075\uffbc\103\uffbc\001\002\000\004\043" +
    "\uffb3\001\002\000\022\013\ufffa\042\ufffa\043\ufffa\054\ufffa" +
    "\057\ufffa\064\ufffa\066\ufffa\070\ufffa\001\002\000\022\013" +
    "\ufffc\042\ufffc\043\ufffc\054\ufffc\057\ufffc\064\ufffc\066\ufffc" +
    "\070\ufffc\001\002\000\022\013\ufffb\042\ufffb\043\ufffb\054" +
    "\ufffb\057\ufffb\064\ufffb\066\ufffb\070\ufffb\001\002\000\020" +
    "\002\uffa1\025\150\026\152\027\162\030\163\031\155\074" +
    "\157\001\002\000\010\015\uffc2\033\165\067\uffc2\001\002" +
    "\000\004\002\uff9e\001\002\000\010\015\uffc2\033\165\067" +
    "\uffc2\001\002\000\004\002\uffff\001\002\000\020\002\uff9c" +
    "\025\150\026\152\027\162\030\163\031\155\074\157\001" +
    "\002\000\010\015\uffc2\033\165\067\uffc2\001\002\000\004" +
    "\067\221\001\002\000\004\015\033\001\002\000\004\002" +
    "\uffa2\001\002\000\020\002\uff9d\025\150\026\152\027\162" +
    "\030\163\031\155\074\157\001\002\000\010\015\uffc2\033" +
    "\165\067\uffc2\001\002\000\010\015\uffc2\033\165\067\uffc2" +
    "\001\002\000\006\015\uffc7\067\uffc7\001\002\000\004\076" +
    "\054\001\002\000\004\034\174\001\002\000\006\034\uffbf" +
    "\035\170\001\002\000\004\076\054\001\002\000\004\034" +
    "\uffc1\001\002\000\006\034\uffbf\035\170\001\002\000\004" +
    "\034\uffc0\001\002\000\006\015\uffc3\067\uffc3\001\002\000" +
    "\006\015\uffc8\067\uffc8\001\002\000\004\002\uffa0\001\002" +
    "\000\004\037\200\001\002\000\012\040\uff99\071\204\072" +
    "\203\073\201\001\002\000\014\025\uff96\026\uff96\027\uff96" +
    "\030\uff96\031\uff96\001\002\000\014\025\150\026\152\027" +
    "\162\030\163\031\155\001\002\000\014\025\uff95\026\uff95" +
    "\027\uff95\030\uff95\031\uff95\001\002\000\014\025\uff97\026" +
    "\uff97\027\uff97\030\uff97\031\uff97\001\002\000\004\040\213" +
    "\001\002\000\006\032\210\040\uff93\001\002\000\004\040" +
    "\uff9a\001\002\000\010\071\204\072\203\073\201\001\002" +
    "\000\006\032\210\040\uff93\001\002\000\004\040\uff94\001" +
    "\002\000\004\012\214\001\002\000\026\013\ufffd\015\033" +
    "\024\014\036\032\044\042\055\012\063\034\065\041\075" +
    "\023\103\037\001\002\000\004\013\216\001\002\000\020" +
    "\002\uff91\025\uff91\026\uff91\027\uff91\030\uff91\031\uff91\074" +
    "\uff91\001\002\000\004\015\033\001\002\000\006\032\uff98" +
    "\040\uff98\001\002\000\004\015\033\001\002\000\004\037" +
    "\223\001\002\000\012\040\uff99\071\204\072\203\073\201" +
    "\001\002\000\004\040\225\001\002\000\004\012\226\001" +
    "\002\000\026\015\033\024\014\036\032\044\042\055\012" +
    "\063\034\065\041\070\ufffd\075\023\103\037\001\002\000" +
    "\004\070\230\001\002\000\016\015\033\076\054\077\057" +
    "\100\045\101\060\102\046\001\002\000\004\013\232\001" +
    "\002\000\020\002\uff9b\025\uff9b\026\uff9b\027\uff9b\030\uff9b" +
    "\031\uff9b\074\uff9b\001\002\000\004\013\uff92\001\002\000" +
    "\006\015\uffc6\067\uffc6\001\002\000\004\002\uff9f\001\002" +
    "\000\006\015\uffc9\067\uffc9\001\002\000\006\015\uffca\067" +
    "\uffca\001\002\000\004\037\241\001\002\000\020\015\033" +
    "\040\uffef\076\054\077\057\100\045\101\060\102\046\001" +
    "\002\000\004\040\250\001\002\000\006\035\244\040\uffed" +
    "\001\002\000\016\015\033\076\054\077\057\100\045\101" +
    "\060\102\046\001\002\000\004\040\ufff0\001\002\000\006" +
    "\035\244\040\uffed\001\002\000\004\040\uffee\001\002\000" +
    "\004\035\251\001\002\000\050\013\ufff1\015\ufff1\024\ufff1" +
    "\036\ufff1\042\ufff1\043\ufff1\044\ufff1\054\ufff1\055\ufff1\057" +
    "\ufff1\060\ufff1\061\ufff1\063\ufff1\064\ufff1\065\ufff1\066\ufff1" +
    "\070\ufff1\075\ufff1\103\ufff1\001\002\000\004\014\257\001" +
    "\002\000\016\015\033\076\054\077\057\100\045\101\060" +
    "\102\046\001\002\000\004\034\255\001\002\000\006\014" +
    "\uffe9\033\253\001\002\000\004\014\uffea\001\002\000\020" +
    "\015\033\075\023\076\054\077\057\100\045\101\060\102" +
    "\046\001\002\000\050\013\uffda\015\uffda\024\uffda\036\uffda" +
    "\042\uffda\043\uffda\044\uffda\054\uffda\055\uffda\057\uffda\060" +
    "\uffda\061\uffda\063\uffda\064\uffda\065\uffda\066\uffda\070\uffda" +
    "\075\uffda\103\uffda\001\002\000\050\013\uffe7\015\uffe7\024" +
    "\uffe7\036\uffe7\042\uffe7\043\uffe7\044\uffe7\054\uffe7\055\uffe7" +
    "\057\uffe7\060\uffe7\061\uffe7\063\uffe7\064\uffe7\065\uffe7\066" +
    "\uffe7\070\uffe7\075\uffe7\103\uffe7\001\002\000\074\004\265" +
    "\005\271\006\267\007\270\013\uffdb\015\uffdb\016\110\017" +
    "\112\020\111\021\115\022\106\023\113\024\uffdb\036\uffdb" +
    "\042\uffdb\043\uffdb\044\uffdb\054\uffdb\055\uffdb\057\uffdb\060" +
    "\uffdb\061\uffdb\063\uffdb\064\uffdb\065\uffdb\066\uffdb\070\uffdb" +
    "\075\uffdb\103\uffdb\001\002\000\050\013\uffeb\015\uffeb\024" +
    "\uffeb\036\uffeb\042\uffeb\043\uffeb\044\uffeb\054\uffeb\055\uffeb" +
    "\057\uffeb\060\uffeb\061\uffeb\063\uffeb\064\uffeb\065\uffeb\066" +
    "\uffeb\070\uffeb\075\uffeb\103\uffeb\001\002\000\020\015\uffd8" +
    "\075\uffd8\076\uffd8\077\uffd8\100\uffd8\101\uffd8\102\uffd8\001" +
    "\002\000\020\015\uffd7\075\uffd7\076\uffd7\077\uffd7\100\uffd7" +
    "\101\uffd7\102\uffd7\001\002\000\020\015\uffd9\075\uffd9\076" +
    "\uffd9\077\uffd9\100\uffd9\101\uffd9\102\uffd9\001\002\000\020" +
    "\015\uffd5\075\uffd5\076\uffd5\077\uffd5\100\uffd5\101\uffd5\102" +
    "\uffd5\001\002\000\020\015\uffd4\075\uffd4\076\uffd4\077\uffd4" +
    "\100\uffd4\101\uffd4\102\uffd4\001\002\000\020\015\uffd6\075" +
    "\uffd6\076\uffd6\077\uffd6\100\uffd6\101\uffd6\102\uffd6\001\002" +
    "\000\020\015\033\075\023\076\054\077\057\100\045\101" +
    "\060\102\046\001\002\000\050\013\uffdc\015\uffdc\024\uffdc" +
    "\036\uffdc\042\uffdc\043\uffdc\044\uffdc\054\uffdc\055\uffdc\057" +
    "\uffdc\060\uffdc\061\uffdc\063\uffdc\064\uffdc\065\uffdc\066\uffdc" +
    "\070\uffdc\075\uffdc\103\uffdc\001\002\000\004\015\033\001" +
    "\002\000\006\032\277\035\uffc4\001\002\000\004\035\302" +
    "\001\002\000\004\015\033\001\002\000\006\032\277\035" +
    "\uffc4\001\002\000\004\035\uffc5\001\002\000\044\013\uffcb" +
    "\015\uffcb\024\uffcb\036\uffcb\042\uffcb\043\uffcb\044\uffcb\054" +
    "\uffcb\055\uffcb\057\uffcb\063\uffcb\064\uffcb\065\uffcb\066\uffcb" +
    "\070\uffcb\075\uffcb\103\uffcb\001\002\000\004\015\033\001" +
    "\002\000\006\060\312\061\313\001\002\000\004\040\306" +
    "\001\002\000\004\056\307\001\002\000\026\015\033\024" +
    "\014\036\032\044\042\055\012\057\ufffd\063\034\065\041" +
    "\075\023\103\037\001\002\000\004\057\311\001\002\000" +
    "\044\013\uffa9\015\uffa9\024\uffa9\036\uffa9\042\uffa9\043\uffa9" +
    "\044\uffa9\054\uffa9\055\uffa9\057\uffa9\063\uffa9\064\uffa9\065" +
    "\uffa9\066\uffa9\070\uffa9\075\uffa9\103\uffa9\001\002\000\016" +
    "\015\033\076\054\077\057\100\045\101\060\102\046\001" +
    "\002\000\004\076\054\001\002\000\004\040\uffa7\001\002" +
    "\000\006\040\uffa5\062\316\001\002\000\004\037\320\001" +
    "\002\000\004\040\uffa8\001\002\000\004\076\054\001\002" +
    "\000\004\040\322\001\002\000\004\040\uffa6\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\320\000\006\002\004\003\005\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\042\005\023\006\035\007\012\010" +
    "\025\011\017\012\021\022\026\023\027\036\024\037\020" +
    "\040\016\050\030\051\034\052\014\053\037\070\015\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\024\273" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\035\251" +
    "\001\001\000\004\012\237\001\001\000\002\001\001\000" +
    "\040\006\145\007\012\010\025\011\017\012\021\022\026" +
    "\023\027\036\024\037\020\040\016\050\030\051\034\052" +
    "\014\053\037\070\015\001\001\000\040\006\144\007\012" +
    "\010\025\011\017\012\021\022\026\023\027\036\024\037" +
    "\020\040\016\050\030\051\034\052\014\053\037\070\015" +
    "\001\001\000\002\001\001\000\002\001\001\000\040\006" +
    "\143\007\012\010\025\011\017\012\021\022\026\023\027" +
    "\036\024\037\020\040\016\050\030\051\034\052\014\053" +
    "\037\070\015\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\042\005\072\006\035" +
    "\007\012\010\025\011\017\012\021\022\026\023\027\036" +
    "\024\037\020\040\016\050\030\051\034\052\014\053\037" +
    "\070\015\001\001\000\004\012\042\001\001\000\002\001" +
    "\001\000\022\014\055\015\047\016\052\017\046\020\061" +
    "\021\050\043\054\044\051\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\042\005\063\006\035\007\012\010\025\011\017\012\021" +
    "\022\026\023\027\036\024\037\020\040\016\050\030\051" +
    "\034\052\014\053\037\070\015\001\001\000\002\001\001" +
    "\000\002\001\001\000\042\005\066\006\035\007\012\010" +
    "\025\011\017\012\021\022\026\023\027\036\024\037\020" +
    "\040\016\050\030\051\034\052\014\053\037\070\015\001" +
    "\001\000\002\001\001\000\022\014\055\015\047\016\052" +
    "\017\046\020\061\021\050\043\070\044\051\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\026\012\076\014\077\015\047\016\052\017" +
    "\046\020\061\021\050\031\100\041\101\045\075\001\001" +
    "\000\006\046\121\047\120\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\034\104\047\103\001\001\000\002" +
    "\001\001\000\002\001\001\000\022\012\076\014\077\015" +
    "\047\016\052\017\046\020\061\021\050\031\117\001\001" +
    "\000\022\012\076\014\077\015\047\016\052\017\046\020" +
    "\061\021\050\031\116\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\024\012\076\014\077\015\047\016\052\017\046\020\061" +
    "\021\050\031\100\045\122\001\001\000\002\001\001\000" +
    "\006\046\123\047\120\001\001\000\002\001\001\000\026" +
    "\012\076\014\077\015\047\016\052\017\046\020\061\021" +
    "\050\031\100\041\125\045\075\001\001\000\002\001\001" +
    "\000\002\001\001\000\042\005\130\006\035\007\012\010" +
    "\025\011\017\012\021\022\026\023\027\036\024\037\020" +
    "\040\016\050\030\051\034\052\014\053\037\070\015\001" +
    "\001\000\002\001\001\000\002\001\001\000\026\012\076" +
    "\014\077\015\047\016\052\017\046\020\061\021\050\031" +
    "\100\041\133\045\075\001\001\000\002\001\001\000\002" +
    "\001\001\000\042\005\136\006\035\007\012\010\025\011" +
    "\017\012\021\022\026\023\027\036\024\037\020\040\016" +
    "\050\030\051\034\052\014\053\037\070\015\001\001\000" +
    "\004\042\140\001\001\000\042\005\142\006\035\007\012" +
    "\010\025\011\017\012\021\022\026\023\027\036\024\037" +
    "\020\040\016\050\030\051\034\052\014\053\037\070\015" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\016\024\155\056\152\057\157\060\160\061\153\062" +
    "\150\001\001\000\004\026\236\001\001\000\002\001\001" +
    "\000\004\026\235\001\001\000\002\001\001\000\014\024" +
    "\155\057\234\060\160\061\153\062\150\001\001\000\004" +
    "\026\233\001\001\000\002\001\001\000\004\012\176\001" +
    "\001\000\002\001\001\000\014\024\155\057\175\060\160" +
    "\061\153\062\150\001\001\000\004\026\174\001\001\000" +
    "\004\026\163\001\001\000\002\001\001\000\006\015\166" +
    "\027\165\001\001\000\002\001\001\000\004\030\170\001" +
    "\001\000\004\015\171\001\001\000\002\001\001\000\004" +
    "\030\172\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\063\204\064\205\066\201\001\001\000\002\001\001\000" +
    "\004\024\216\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\065\206\001\001\000\002\001" +
    "\001\000\006\064\210\066\201\001\001\000\004\065\211" +
    "\001\001\000\002\001\001\000\002\001\001\000\042\005" +
    "\214\006\035\007\012\010\025\011\017\012\021\022\026" +
    "\023\027\036\024\037\020\040\016\050\030\051\034\052" +
    "\014\053\037\070\015\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\012\217\001\001\000\002\001\001\000" +
    "\004\012\221\001\001\000\002\001\001\000\010\063\223" +
    "\064\205\066\201\001\001\000\002\001\001\000\002\001" +
    "\001\000\042\005\226\006\035\007\012\010\025\011\017" +
    "\012\021\022\026\023\027\036\024\037\020\040\016\050" +
    "\030\051\034\052\014\053\037\070\015\001\001\000\004" +
    "\067\230\001\001\000\022\012\076\014\077\015\047\016" +
    "\052\017\046\020\061\021\050\031\232\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\024\012\076\014\077\015\047\016" +
    "\052\017\046\020\061\021\050\031\242\071\241\001\001" +
    "\000\002\001\001\000\004\072\244\001\001\000\022\012" +
    "\076\014\077\015\047\016\052\017\046\020\061\021\050" +
    "\031\245\001\001\000\002\001\001\000\004\072\246\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\022\012\076\014\077\015\047\016" +
    "\052\017\046\020\061\021\050\031\253\001\001\000\002" +
    "\001\001\000\004\035\255\001\001\000\002\001\001\000" +
    "\030\004\260\012\076\013\262\014\077\015\047\016\052" +
    "\017\046\020\061\021\050\031\261\070\257\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\032\271\033\265" +
    "\034\263\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\026\004\272\012\076\014" +
    "\077\015\047\016\052\017\046\020\061\021\050\031\261" +
    "\070\257\001\001\000\002\001\001\000\004\012\274\001" +
    "\001\000\004\025\275\001\001\000\002\001\001\000\004" +
    "\012\277\001\001\000\004\025\300\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\011\303\012\021\054\304" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\042\005\307\006\035\007\012\010\025\011\017" +
    "\012\021\022\026\023\027\036\024\037\020\040\016\050" +
    "\030\051\034\052\014\053\037\070\015\001\001\000\002" +
    "\001\001\000\002\001\001\000\022\012\076\014\077\015" +
    "\047\016\052\017\046\020\061\021\050\031\314\001\001" +
    "\000\004\015\313\001\001\000\002\001\001\000\004\055" +
    "\316\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\015\320\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$A_Sintactico$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$A_Sintactico$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$A_Sintactico$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public String resultado="";
    public static LinkedList<TError> TablaES = new LinkedList<TError>();
    public GestionLenguaje gestion = new GestionLenguaje(); 

    //Metodo al que se llama automaticamente ante algun error sintactico
    public void syntax_error(Symbol s)
    {        
        String lexema = s.value.toString();
        int fila = s.right;
        int columna = s.left;
        
        System.out.println("!!!!!!! Error Sintactico Recuperado !!!!!!!");
        System.out.println("\t\tLexema: "+lexema);
        System.out.println("\t\tFila: "+fila);
        System.out.println("\t\tColumna: "+columna);

        TError datos = new TError(lexema,fila,columna,"Error Sintactico","Caracter no esperado");
        TablaES.add(datos);
       
        
    }

    //Metodo al que se llama en el momento en que ya no es posible una recuperacion de errores
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception
    {        
        String lexema = s.value.toString();
        int fila = s.right;
        int columna = s.left;
        
        System.out.println("!!!!!!! Error Sintactico, Panic Mode !!!!!!! ");
        System.out.println("\t\tLexema: "+lexema);
        System.out.println("\t\tFila: "+fila);
        System.out.println("\t\tColumna: "+columna);

        TError datos = new TError(lexema,fila,columna,"Error Sintactico","Caracter no esperado");
        TablaES.add(datos);
     
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$A_Sintactico$actions {



  private final A_Sintactico parser;

  /** Constructor */
  CUP$A_Sintactico$actions(A_Sintactico parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$A_Sintactico$do_action_part00000000(
    int                        CUP$A_Sintactico$act_num,
    java_cup.runtime.lr_parser CUP$A_Sintactico$parser,
    java.util.Stack            CUP$A_Sintactico$stack,
    int                        CUP$A_Sintactico$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$A_Sintactico$result;

      /* select the action based on the action number */
      switch (CUP$A_Sintactico$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= S EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-1)).right;
		String start_val = (String)((java_cup.runtime.Symbol) CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-1)).value;
		RESULT = start_val;
              CUP$A_Sintactico$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$A_Sintactico$parser.done_parsing();
          return CUP$A_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // S ::= PROGRAM 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$A_Sintactico$stack.peek()).value;
		 gestion.analizarCodigo(a);
              CUP$A_Sintactico$result = parser.getSymbolFactory().newSymbol("S",0, ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()), RESULT);
            }
          return CUP$A_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // PROGRAM ::= tprogram tprincipal tllabre PROGRAM_OPERATIONS tllcierra PROGRAM_BLOCK 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$A_Sintactico$stack.peek()).value;
		RESULT = gestion.mainBuilder(a,b);
              CUP$A_Sintactico$result = parser.getSymbolFactory().newSymbol("PROGRAM",1, ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()), RESULT);
            }
          return CUP$A_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // PROGRAM_OPERATIONS ::= OPERATIONS 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$A_Sintactico$stack.peek()).value;
		RESULT = a;
              CUP$A_Sintactico$result = parser.getSymbolFactory().newSymbol("PROGRAM_OPERATIONS",3, ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()), RESULT);
            }
          return CUP$A_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // PROGRAM_OPERATIONS ::= 
            {
              String RESULT =null;
		RESULT = "";
              CUP$A_Sintactico$result = parser.getSymbolFactory().newSymbol("PROGRAM_OPERATIONS",3, ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()), RESULT);
            }
          return CUP$A_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // OPERATIONS ::= INSTRUCTION OPERATIONS 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$A_Sintactico$stack.peek()).value;
		RESULT = a+""+b;
              CUP$A_Sintactico$result = parser.getSymbolFactory().newSymbol("OPERATIONS",4, ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()), RESULT);
            }
          return CUP$A_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // OPERATIONS ::= CONDITIONAL OPERATIONS 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$A_Sintactico$stack.peek()).value;
		RESULT = a+""+b;
              CUP$A_Sintactico$result = parser.getSymbolFactory().newSymbol("OPERATIONS",4, ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()), RESULT);
            }
          return CUP$A_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // OPERATIONS ::= CICLE OPERATIONS 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$A_Sintactico$stack.peek()).value;
		RESULT = a+""+b;
              CUP$A_Sintactico$result = parser.getSymbolFactory().newSymbol("OPERATIONS",4, ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()), RESULT);
            }
          return CUP$A_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // OPERATIONS ::= SINGLE_OPERATIONS 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$A_Sintactico$stack.peek()).value;
		RESULT = a;
              CUP$A_Sintactico$result = parser.getSymbolFactory().newSymbol("OPERATIONS",4, ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()), RESULT);
            }
          return CUP$A_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // SINGLE_OPERATIONS ::= INSTRUCTION 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$A_Sintactico$stack.peek()).value;
		RESULT = a;
              CUP$A_Sintactico$result = parser.getSymbolFactory().newSymbol("SINGLE_OPERATIONS",5, ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()), RESULT);
            }
          return CUP$A_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // SINGLE_OPERATIONS ::= CONDITIONAL 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$A_Sintactico$stack.peek()).value;
		RESULT = a;
              CUP$A_Sintactico$result = parser.getSymbolFactory().newSymbol("SINGLE_OPERATIONS",5, ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()), RESULT);
            }
          return CUP$A_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // SINGLE_OPERATIONS ::= CICLE 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$A_Sintactico$stack.peek()).value;
		RESULT = a;
              CUP$A_Sintactico$result = parser.getSymbolFactory().newSymbol("SINGLE_OPERATIONS",5, ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()), RESULT);
            }
          return CUP$A_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // INSTRUCTION ::= ASIGN 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$A_Sintactico$stack.peek()).value;
		RESULT = a;
              CUP$A_Sintactico$result = parser.getSymbolFactory().newSymbol("INSTRUCTION",6, ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()), RESULT);
            }
          return CUP$A_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // INSTRUCTION ::= COMMENT 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$A_Sintactico$stack.peek()).value;
		RESULT = a;
              CUP$A_Sintactico$result = parser.getSymbolFactory().newSymbol("INSTRUCTION",6, ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()), RESULT);
            }
          return CUP$A_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // INSTRUCTION ::= VARDEFS 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$A_Sintactico$stack.peek()).value;
		RESULT = a;
              CUP$A_Sintactico$result = parser.getSymbolFactory().newSymbol("INSTRUCTION",6, ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()), RESULT);
            }
          return CUP$A_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // INSTRUCTION ::= CALL 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$A_Sintactico$stack.peek()).value;
		RESULT = a;
              CUP$A_Sintactico$result = parser.getSymbolFactory().newSymbol("INSTRUCTION",6, ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()), RESULT);
            }
          return CUP$A_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // CALL ::= tcall ID tpabre CALLPARAMETERS tpcierra tpcoma 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-4)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-2)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-2)).value;
		RESULT = gestion.llamadoMetodos(a,b);
              CUP$A_Sintactico$result = parser.getSymbolFactory().newSymbol("CALL",54, ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()), RESULT);
            }
          return CUP$A_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // CALLPARAMETERS ::= VALUES MULTIVALUES 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$A_Sintactico$stack.peek()).value;
		RESULT = a+""+b;
              CUP$A_Sintactico$result = parser.getSymbolFactory().newSymbol("CALLPARAMETERS",55, ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()), RESULT);
            }
          return CUP$A_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // CALLPARAMETERS ::= 
            {
              String RESULT =null;
		RESULT = "";
              CUP$A_Sintactico$result = parser.getSymbolFactory().newSymbol("CALLPARAMETERS",55, ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()), RESULT);
            }
          return CUP$A_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // MULTIVALUES ::= tpcoma VALUES MULTIVALUES 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$A_Sintactico$stack.peek()).value;
		RESULT = ","+a+b;
              CUP$A_Sintactico$result = parser.getSymbolFactory().newSymbol("MULTIVALUES",56, ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()), RESULT);
            }
          return CUP$A_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // MULTIVALUES ::= 
            {
              String RESULT =null;
		RESULT = "";
              CUP$A_Sintactico$result = parser.getSymbolFactory().newSymbol("MULTIVALUES",56, ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()), RESULT);
            }
          return CUP$A_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // COMMENT ::= tdcomentario 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$A_Sintactico$stack.peek()).value;
		RESULT = "//"+a.replace("%","")+"\n";
              CUP$A_Sintactico$result = parser.getSymbolFactory().newSymbol("COMMENT",16, ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()), RESULT);
            }
          return CUP$A_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // ASIGN ::= ID ARRAY_LOCATION tasignar OPT_VALUES 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-2)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$A_Sintactico$stack.peek()).value;
		RESULT = gestion.asignacionDeVariables(a,b,c);
              CUP$A_Sintactico$result = parser.getSymbolFactory().newSymbol("ASIGN",7, ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()), RESULT);
            }
          return CUP$A_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // ARRAY_LOCATION ::= tcoabre VALUES tcocierra ARRAY_LOCATION 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$A_Sintactico$stack.peek()).value;
		RESULT = "["+a+"]"+b;
              CUP$A_Sintactico$result = parser.getSymbolFactory().newSymbol("ARRAY_LOCATION",27, ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()), RESULT);
            }
          return CUP$A_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // ARRAY_LOCATION ::= 
            {
              String RESULT =null;
		RESULT = "";
              CUP$A_Sintactico$result = parser.getSymbolFactory().newSymbol("ARRAY_LOCATION",27, ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()), RESULT);
            }
          return CUP$A_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // ID ::= tid 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$A_Sintactico$stack.peek()).value;
		 RESULT = a; 
              CUP$A_Sintactico$result = parser.getSymbolFactory().newSymbol("ID",8, ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()), RESULT);
            }
          return CUP$A_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // OPT_VALUES ::= IOPERATIONS 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$A_Sintactico$stack.peek()).value;
		RESULT = a;
              CUP$A_Sintactico$result = parser.getSymbolFactory().newSymbol("OPT_VALUES",9, ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()), RESULT);
            }
          return CUP$A_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // DATO ::= NUMBER 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$A_Sintactico$stack.peek()).value;
		RESULT = a;
              CUP$A_Sintactico$result = parser.getSymbolFactory().newSymbol("DATO",10, ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()), RESULT);
            }
          return CUP$A_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // DATO ::= NUMBERFLOAT 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$A_Sintactico$stack.peek()).value;
		RESULT = a;
              CUP$A_Sintactico$result = parser.getSymbolFactory().newSymbol("DATO",10, ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()), RESULT);
            }
          return CUP$A_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // DATO ::= BOOL 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$A_Sintactico$stack.peek()).value;
		RESULT = a;
              CUP$A_Sintactico$result = parser.getSymbolFactory().newSymbol("DATO",10, ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()), RESULT);
            }
          return CUP$A_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // DATO ::= CHAR 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$A_Sintactico$stack.peek()).value;
		RESULT = a;
              CUP$A_Sintactico$result = parser.getSymbolFactory().newSymbol("DATO",10, ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()), RESULT);
            }
          return CUP$A_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // DATO ::= STRING 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$A_Sintactico$stack.peek()).value;
		RESULT = a;
              CUP$A_Sintactico$result = parser.getSymbolFactory().newSymbol("DATO",10, ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()), RESULT);
            }
          return CUP$A_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // NUMBER ::= tdnumber 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$A_Sintactico$stack.peek()).value;
		 RESULT = a; 
              CUP$A_Sintactico$result = parser.getSymbolFactory().newSymbol("NUMBER",11, ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()), RESULT);
            }
          return CUP$A_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // NUMBERFLOAT ::= tdnumberfloat 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$A_Sintactico$stack.peek()).value;
		 RESULT = a.replace(",",".")+"f"; 
              CUP$A_Sintactico$result = parser.getSymbolFactory().newSymbol("NUMBERFLOAT",12, ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()), RESULT);
            }
          return CUP$A_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // BOOL ::= tdboolean 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$A_Sintactico$stack.peek()).value;
		 RESULT = a.toLowerCase(); 
              CUP$A_Sintactico$result = parser.getSymbolFactory().newSymbol("BOOL",13, ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()), RESULT);
            }
          return CUP$A_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // CHAR ::= tdchar 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$A_Sintactico$stack.peek()).value;
		 RESULT = a; 
              CUP$A_Sintactico$result = parser.getSymbolFactory().newSymbol("CHAR",14, ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()), RESULT);
            }
          return CUP$A_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // STRING ::= tdstring 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$A_Sintactico$stack.peek()).value;
		 RESULT = a; 
              CUP$A_Sintactico$result = parser.getSymbolFactory().newSymbol("STRING",15, ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()), RESULT);
            }
          return CUP$A_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // IOPERATIONS ::= VALUES OPERA IOPERATIONS 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$A_Sintactico$stack.peek()).value;
		RESULT = a+b+c;
              CUP$A_Sintactico$result = parser.getSymbolFactory().newSymbol("IOPERATIONS",2, ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()), RESULT);
            }
          return CUP$A_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // IOPERATIONS ::= VALUES 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$A_Sintactico$stack.peek()).value;
		RESULT = a;
              CUP$A_Sintactico$result = parser.getSymbolFactory().newSymbol("IOPERATIONS",2, ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()), RESULT);
            }
          return CUP$A_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // IOPERATIONS ::= CALL 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$A_Sintactico$stack.peek()).value;
		RESULT = a;
              CUP$A_Sintactico$result = parser.getSymbolFactory().newSymbol("IOPERATIONS",2, ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()), RESULT);
            }
          return CUP$A_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // OPERA ::= OPERAMATH 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$A_Sintactico$stack.peek()).value;
		RESULT = a;
              CUP$A_Sintactico$result = parser.getSymbolFactory().newSymbol("OPERA",24, ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()), RESULT);
            }
          return CUP$A_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // OPERA ::= OPERARELATION 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$A_Sintactico$stack.peek()).value;
		RESULT = a;
              CUP$A_Sintactico$result = parser.getSymbolFactory().newSymbol("OPERA",24, ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()), RESULT);
            }
          return CUP$A_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // OPERAMATH ::= tsuma 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$A_Sintactico$stack.peek()).value;
		RESULT = a;
              CUP$A_Sintactico$result = parser.getSymbolFactory().newSymbol("OPERAMATH",25, ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()), RESULT);
            }
          return CUP$A_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // OPERAMATH ::= tresta 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$A_Sintactico$stack.peek()).value;
		RESULT = a;
              CUP$A_Sintactico$result = parser.getSymbolFactory().newSymbol("OPERAMATH",25, ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()), RESULT);
            }
          return CUP$A_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // OPERAMATH ::= tmultiplicar 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$A_Sintactico$stack.peek()).value;
		RESULT = a;
              CUP$A_Sintactico$result = parser.getSymbolFactory().newSymbol("OPERAMATH",25, ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()), RESULT);
            }
          return CUP$A_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // OPERAMATH ::= tdivision 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$A_Sintactico$stack.peek()).value;
		RESULT = a;
              CUP$A_Sintactico$result = parser.getSymbolFactory().newSymbol("OPERAMATH",25, ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()), RESULT);
            }
          return CUP$A_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // OPERARELATION ::= tmenorque 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$A_Sintactico$stack.peek()).value;
		RESULT = a;
              CUP$A_Sintactico$result = parser.getSymbolFactory().newSymbol("OPERARELATION",26, ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()), RESULT);
            }
          return CUP$A_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // OPERARELATION ::= tmenorigual 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$A_Sintactico$stack.peek()).value;
		RESULT = a;
              CUP$A_Sintactico$result = parser.getSymbolFactory().newSymbol("OPERARELATION",26, ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()), RESULT);
            }
          return CUP$A_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // OPERARELATION ::= tmayorque 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$A_Sintactico$stack.peek()).value;
		RESULT = a;
              CUP$A_Sintactico$result = parser.getSymbolFactory().newSymbol("OPERARELATION",26, ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()), RESULT);
            }
          return CUP$A_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // OPERARELATION ::= tmayorigual 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$A_Sintactico$stack.peek()).value;
		RESULT = a;
              CUP$A_Sintactico$result = parser.getSymbolFactory().newSymbol("OPERARELATION",26, ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()), RESULT);
            }
          return CUP$A_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // OPERARELATION ::= tdiferente 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$A_Sintactico$stack.peek()).value;
		RESULT = a;
              CUP$A_Sintactico$result = parser.getSymbolFactory().newSymbol("OPERARELATION",26, ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()), RESULT);
            }
          return CUP$A_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // OPERARELATION ::= tigual 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$A_Sintactico$stack.peek()).value;
		RESULT = a;
              CUP$A_Sintactico$result = parser.getSymbolFactory().newSymbol("OPERARELATION",26, ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()), RESULT);
            }
          return CUP$A_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // VALUES ::= DATO 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$A_Sintactico$stack.peek()).value;
		 RESULT = a; 
              CUP$A_Sintactico$result = parser.getSymbolFactory().newSymbol("VALUES",23, ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()), RESULT);
            }
          return CUP$A_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // VALUES ::= ID 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$A_Sintactico$stack.peek()).value;
		 RESULT = a; 
              CUP$A_Sintactico$result = parser.getSymbolFactory().newSymbol("VALUES",23, ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()), RESULT);
            }
          return CUP$A_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // VARDEFS ::= tvar TYPE ID MULTIVAR tpcoma 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-2)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-1)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-1)).value;
		RESULT = gestion.definicionDeVariables(a,b,c);
              CUP$A_Sintactico$result = parser.getSymbolFactory().newSymbol("VARDEFS",17, ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()), RESULT);
            }
          return CUP$A_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // TYPE ::= tboolean ARRAY 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$A_Sintactico$stack.peek()).value;
		RESULT = a+""+b ;
              CUP$A_Sintactico$result = parser.getSymbolFactory().newSymbol("TYPE",18, ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()), RESULT);
            }
          return CUP$A_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // TYPE ::= tint ARRAY 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$A_Sintactico$stack.peek()).value;
		RESULT = a+""+b ;
              CUP$A_Sintactico$result = parser.getSymbolFactory().newSymbol("TYPE",18, ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()), RESULT);
            }
          return CUP$A_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // TYPE ::= tfloat ARRAY 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$A_Sintactico$stack.peek()).value;
		RESULT = a+""+b ;
              CUP$A_Sintactico$result = parser.getSymbolFactory().newSymbol("TYPE",18, ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()), RESULT);
            }
          return CUP$A_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // TYPE ::= tchar ARRAY 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$A_Sintactico$stack.peek()).value;
		RESULT = a+""+b ;
              CUP$A_Sintactico$result = parser.getSymbolFactory().newSymbol("TYPE",18, ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()), RESULT);
            }
          return CUP$A_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // TYPE ::= tstring ARRAY 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$A_Sintactico$stack.peek()).value;
		RESULT = "String"+b ;
              CUP$A_Sintactico$result = parser.getSymbolFactory().newSymbol("TYPE",18, ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()), RESULT);
            }
          return CUP$A_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // MULTIVAR ::= tcoma ID MULTIVAR 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$A_Sintactico$stack.peek()).value;
		String c=(b!=null)?","+a+b:","+a; RESULT = c ;
              CUP$A_Sintactico$result = parser.getSymbolFactory().newSymbol("MULTIVAR",19, ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()), RESULT);
            }
          return CUP$A_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // MULTIVAR ::= 
            {
              String RESULT =null;
		RESULT = "";
              CUP$A_Sintactico$result = parser.getSymbolFactory().newSymbol("MULTIVAR",19, ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()), RESULT);
            }
          return CUP$A_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // ARRAY ::= tcoabre PARAMETERSARRAY tcocierra 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-1)).value;
		RESULT = "["+a+"]";
              CUP$A_Sintactico$result = parser.getSymbolFactory().newSymbol("ARRAY",20, ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()), RESULT);
            }
          return CUP$A_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // ARRAY ::= 
            {
              String RESULT =null;
		RESULT = "";
              CUP$A_Sintactico$result = parser.getSymbolFactory().newSymbol("ARRAY",20, ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()), RESULT);
            }
          return CUP$A_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // PARAMETERSARRAY ::= NUMBER MULTIARRAY 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$A_Sintactico$stack.peek()).value;
		RESULT = a+b;
              CUP$A_Sintactico$result = parser.getSymbolFactory().newSymbol("PARAMETERSARRAY",21, ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()), RESULT);
            }
          return CUP$A_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // MULTIARRAY ::= tpcoma NUMBER MULTIARRAY 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$A_Sintactico$stack.peek()).value;
		String c=(b!=null)?","+a+b:","+a; RESULT = c ;
              CUP$A_Sintactico$result = parser.getSymbolFactory().newSymbol("MULTIARRAY",22, ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()), RESULT);
            }
          return CUP$A_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // MULTIARRAY ::= 
            {
              String RESULT =null;
		RESULT = "";
              CUP$A_Sintactico$result = parser.getSymbolFactory().newSymbol("MULTIARRAY",22, ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()), RESULT);
            }
          return CUP$A_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // CONDITIONAL ::= IF 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$A_Sintactico$stack.peek()).value;
		RESULT = a;
              CUP$A_Sintactico$result = parser.getSymbolFactory().newSymbol("CONDITIONAL",28, ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()), RESULT);
            }
          return CUP$A_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // CONDITIONAL ::= SWITCH 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$A_Sintactico$stack.peek()).value;
		RESULT = a;
              CUP$A_Sintactico$result = parser.getSymbolFactory().newSymbol("CONDITIONAL",28, ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()), RESULT);
            }
          return CUP$A_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // IF ::= tif tpabre CONDITIONS tpcierra tthen PROGRAM_OPERATIONS ELSE tendif 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-5)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-2)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-1)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-1)).value;
		RESULT = gestion.ifProccess(a,b,c);
              CUP$A_Sintactico$result = parser.getSymbolFactory().newSymbol("IF",29, ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()), RESULT);
            }
          return CUP$A_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // CONDITIONS ::= RELATIONALCONDITION LOGICOPERATION 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$A_Sintactico$stack.peek()).value;
		RESULT = a+" "+b;
              CUP$A_Sintactico$result = parser.getSymbolFactory().newSymbol("CONDITIONS",31, ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()), RESULT);
            }
          return CUP$A_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // RELATIONALCONDITION ::= VALUES OPERARELATION VALUES 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$A_Sintactico$stack.peek()).value;
		RESULT = a+" "+b+" "+c;
              CUP$A_Sintactico$result = parser.getSymbolFactory().newSymbol("RELATIONALCONDITION",35, ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()), RESULT);
            }
          return CUP$A_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // RELATIONALCONDITION ::= VALUES OPERALOGIC VALUES 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$A_Sintactico$stack.peek()).value;
		RESULT = a+" "+b+" "+c;
              CUP$A_Sintactico$result = parser.getSymbolFactory().newSymbol("RELATIONALCONDITION",35, ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()), RESULT);
            }
          return CUP$A_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // LOGICOPERATION ::= OPERALOGIC RELATIONALCONDITION LOGICOPERATION 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$A_Sintactico$stack.peek()).value;
		RESULT = a+" "+b+" "+c;
              CUP$A_Sintactico$result = parser.getSymbolFactory().newSymbol("LOGICOPERATION",36, ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()), RESULT);
            }
          return CUP$A_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // LOGICOPERATION ::= 
            {
              String RESULT =null;
		RESULT = "";
              CUP$A_Sintactico$result = parser.getSymbolFactory().newSymbol("LOGICOPERATION",36, ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()), RESULT);
            }
          return CUP$A_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // OPERALOGIC ::= tand 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$A_Sintactico$stack.peek()).value;
		RESULT = a;
              CUP$A_Sintactico$result = parser.getSymbolFactory().newSymbol("OPERALOGIC",37, ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()), RESULT);
            }
          return CUP$A_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // OPERALOGIC ::= tor 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$A_Sintactico$stack.peek()).value;
		RESULT = a;
              CUP$A_Sintactico$result = parser.getSymbolFactory().newSymbol("OPERALOGIC",37, ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()), RESULT);
            }
          return CUP$A_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // OPERALOGIC ::= tnot 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$A_Sintactico$stack.peek()).value;
		RESULT = a;
              CUP$A_Sintactico$result = parser.getSymbolFactory().newSymbol("OPERALOGIC",37, ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()), RESULT);
            }
          return CUP$A_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // ELSE ::= telse PROGRAM_OPERATIONS 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$A_Sintactico$stack.peek()).value;
		RESULT = a;
              CUP$A_Sintactico$result = parser.getSymbolFactory().newSymbol("ELSE",32, ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()), RESULT);
            }
          return CUP$A_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // ELSE ::= 
            {
              String RESULT =null;

              CUP$A_Sintactico$result = parser.getSymbolFactory().newSymbol("ELSE",32, ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()), RESULT);
            }
          return CUP$A_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // SWITCH ::= tcase ID tof CASES tendcase 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-1)).value;
		RESULT = gestion.casesProccess(a,b);
              CUP$A_Sintactico$result = parser.getSymbolFactory().newSymbol("SWITCH",30, ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()), RESULT);
            }
          return CUP$A_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // CASES ::= DATO tdpuntos PROGRAM_OPERATIONS tbreak CASES 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-4)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-2)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$A_Sintactico$stack.peek()).value;
		RESULT = gestion.caseProccess(a,b) + c;
              CUP$A_Sintactico$result = parser.getSymbolFactory().newSymbol("CASES",33, ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()), RESULT);
            }
          return CUP$A_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // CASES ::= DATO tdpuntos PROGRAM_OPERATIONS tbreak 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-1)).value;
		RESULT = gestion.caseProccess(a,b);
              CUP$A_Sintactico$result = parser.getSymbolFactory().newSymbol("CASES",33, ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()), RESULT);
            }
          return CUP$A_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // CASES ::= DEFAULT 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$A_Sintactico$stack.peek()).value;
		RESULT = a;
              CUP$A_Sintactico$result = parser.getSymbolFactory().newSymbol("CASES",33, ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()), RESULT);
            }
          return CUP$A_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // DEFAULT ::= tdefault tdpuntos PROGRAM_OPERATIONS tbreak 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-1)).value;
		RESULT = gestion.defaultProccess(a);
              CUP$A_Sintactico$result = parser.getSymbolFactory().newSymbol("DEFAULT",34, ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()), RESULT);
            }
          return CUP$A_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // CICLE ::= FOR 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$A_Sintactico$stack.peek()).value;
		RESULT= a;
              CUP$A_Sintactico$result = parser.getSymbolFactory().newSymbol("CICLE",38, ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()), RESULT);
            }
          return CUP$A_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // CICLE ::= WHILE 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$A_Sintactico$stack.peek()).value;
		RESULT= a;
              CUP$A_Sintactico$result = parser.getSymbolFactory().newSymbol("CICLE",38, ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()), RESULT);
            }
          return CUP$A_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // CICLE ::= REPEAT 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$A_Sintactico$stack.peek()).value;
		RESULT= a;
              CUP$A_Sintactico$result = parser.getSymbolFactory().newSymbol("CICLE",38, ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()), RESULT);
            }
          return CUP$A_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // FOR ::= tfor tpabre FORPARAMETERS tpcierra tdo PROGRAM_OPERATIONS tendfor 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-4)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-1)).value;
		RESULT = gestion.forProccess(a,b);
              CUP$A_Sintactico$result = parser.getSymbolFactory().newSymbol("FOR",39, ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()), RESULT);
            }
          return CUP$A_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // FORPARAMETERS ::= ASIGN tto VALUES INC 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$A_Sintactico$stack.peek()).value;
		RESULT= gestion.forParameterProccess(a,b,c);
              CUP$A_Sintactico$result = parser.getSymbolFactory().newSymbol("FORPARAMETERS",42, ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()), RESULT);
            }
          return CUP$A_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // FORPARAMETERS ::= ASIGN tdownto NUMBER 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$A_Sintactico$stack.peek()).value;
		RESULT= gestion.forParameterProccess(a,b);
              CUP$A_Sintactico$result = parser.getSymbolFactory().newSymbol("FORPARAMETERS",42, ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()), RESULT);
            }
          return CUP$A_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // INC ::= tinc tpabre NUMBER tpcierra 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-1)).value;
		RESULT= a;
              CUP$A_Sintactico$result = parser.getSymbolFactory().newSymbol("INC",43, ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()), RESULT);
            }
          return CUP$A_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // INC ::= 
            {
              String RESULT =null;
		RESULT= "";
              CUP$A_Sintactico$result = parser.getSymbolFactory().newSymbol("INC",43, ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()), RESULT);
            }
          return CUP$A_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // WHILE ::= twhile tpabre CONDITIONS tpcierra tdo PROGRAM_OPERATIONS tendwhile 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-4)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-1)).value;
		RESULT= gestion.whileProccess(a,b);
              CUP$A_Sintactico$result = parser.getSymbolFactory().newSymbol("WHILE",40, ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()), RESULT);
            }
          return CUP$A_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // REPEAT ::= trepeat PROGRAM_OPERATIONS tuntil tpabre CONDITIONS tpcierra 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-4)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-1)).value;
		RESULT= gestion.repetProccess(b,a);
              CUP$A_Sintactico$result = parser.getSymbolFactory().newSymbol("REPEAT",41, ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()), RESULT);
            }
          return CUP$A_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // PROGRAM_BLOCK ::= BLOCKS 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$A_Sintactico$stack.peek()).value;
		RESULT= a;
              CUP$A_Sintactico$result = parser.getSymbolFactory().newSymbol("PROGRAM_BLOCK",44, ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()), RESULT);
            }
          return CUP$A_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // PROGRAM_BLOCK ::= 
            {
              String RESULT =null;
		RESULT= "";
              CUP$A_Sintactico$result = parser.getSymbolFactory().newSymbol("PROGRAM_BLOCK",44, ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()), RESULT);
            }
          return CUP$A_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // BLOCKS ::= FUNCTION BLOCKS 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$A_Sintactico$stack.peek()).value;
		RESULT= a+b;
              CUP$A_Sintactico$result = parser.getSymbolFactory().newSymbol("BLOCKS",45, ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()), RESULT);
            }
          return CUP$A_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // BLOCKS ::= PROCEDURE BLOCKS 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$A_Sintactico$stack.peek()).value;
		RESULT= a+b;
              CUP$A_Sintactico$result = parser.getSymbolFactory().newSymbol("BLOCKS",45, ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()), RESULT);
            }
          return CUP$A_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // BLOCKS ::= SINGLE_BLOCK 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$A_Sintactico$stack.peek()).value;
		RESULT= a;
              CUP$A_Sintactico$result = parser.getSymbolFactory().newSymbol("BLOCKS",45, ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()), RESULT);
            }
          return CUP$A_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // SINGLE_BLOCK ::= FUNCTION 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$A_Sintactico$stack.peek()).value;
		RESULT= a;
              CUP$A_Sintactico$result = parser.getSymbolFactory().newSymbol("SINGLE_BLOCK",48, ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()), RESULT);
            }
          return CUP$A_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // SINGLE_BLOCK ::= PROCEDURE 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$A_Sintactico$stack.peek()).value;
		RESULT= a;
              CUP$A_Sintactico$result = parser.getSymbolFactory().newSymbol("SINGLE_BLOCK",48, ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()), RESULT);
            }
          return CUP$A_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // FUNCTION ::= TYPE tfunction ID tpabre PARAMETERS tpcierra tllabre PROGRAM_OPERATIONS RETURN tllcierra 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-9)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-9)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-9)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-7)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-7)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-7)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-5)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-5)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-5)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-2)).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-1)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-1)).value;
		RESULT = gestion.functionBuilder(a,b,c,d,e); 
              CUP$A_Sintactico$result = parser.getSymbolFactory().newSymbol("FUNCTION",46, ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-9)), ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()), RESULT);
            }
          return CUP$A_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // PARAMETERS ::= SETPARAMETER PARAMETER 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$A_Sintactico$stack.peek()).value;
		RESULT = a+b;
              CUP$A_Sintactico$result = parser.getSymbolFactory().newSymbol("PARAMETERS",49, ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()), RESULT);
            }
          return CUP$A_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // PARAMETERS ::= 
            {
              String RESULT =null;
		RESULT = "";
              CUP$A_Sintactico$result = parser.getSymbolFactory().newSymbol("PARAMETERS",49, ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()), RESULT);
            }
          return CUP$A_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // SETPARAMETER ::= MODE TYPE ID 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$A_Sintactico$stack.peek()).value;
		RESULT = a+" "+b;
              CUP$A_Sintactico$result = parser.getSymbolFactory().newSymbol("SETPARAMETER",50, ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()), RESULT);
            }
          return CUP$A_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // MODE ::= tentrada 
            {
              String RESULT =null;

              CUP$A_Sintactico$result = parser.getSymbolFactory().newSymbol("MODE",52, ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()), RESULT);
            }
          return CUP$A_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // MODE ::= tsalida 
            {
              String RESULT =null;

              CUP$A_Sintactico$result = parser.getSymbolFactory().newSymbol("MODE",52, ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()), RESULT);
            }
          return CUP$A_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // MODE ::= tentradasalida 
            {
              String RESULT =null;

              CUP$A_Sintactico$result = parser.getSymbolFactory().newSymbol("MODE",52, ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()), RESULT);
            }
          return CUP$A_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // PARAMETER ::= tcoma SETPARAMETER PARAMETER 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$A_Sintactico$stack.peek()).value;
		RESULT = ","+a+b;
              CUP$A_Sintactico$result = parser.getSymbolFactory().newSymbol("PARAMETER",51, ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()), RESULT);
            }
          return CUP$A_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // PARAMETER ::= 
            {
              String RESULT =null;
		RESULT = "";
              CUP$A_Sintactico$result = parser.getSymbolFactory().newSymbol("PARAMETER",51, ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()), RESULT);
            }
          return CUP$A_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // RETURN ::= treturn VALUES 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$A_Sintactico$stack.peek()).value;
		RESULT = a;
              CUP$A_Sintactico$result = parser.getSymbolFactory().newSymbol("RETURN",53, ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()), RESULT);
            }
          return CUP$A_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // PROCEDURE ::= tprocedure ID tpabre PARAMETERS tpcierra tllabre PROGRAM_OPERATIONS tllcierra 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-6)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-4)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-1)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-1)).value;
		RESULT = gestion.procedureBuilder(a,b,c); 
              CUP$A_Sintactico$result = parser.getSymbolFactory().newSymbol("PROCEDURE",47, ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()), RESULT);
            }
          return CUP$A_Sintactico$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$A_Sintactico$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$A_Sintactico$do_action(
    int                        CUP$A_Sintactico$act_num,
    java_cup.runtime.lr_parser CUP$A_Sintactico$parser,
    java.util.Stack            CUP$A_Sintactico$stack,
    int                        CUP$A_Sintactico$top)
    throws java.lang.Exception
    {
              return CUP$A_Sintactico$do_action_part00000000(
                               CUP$A_Sintactico$act_num,
                               CUP$A_Sintactico$parser,
                               CUP$A_Sintactico$stack,
                               CUP$A_Sintactico$top);
    }
}

}
